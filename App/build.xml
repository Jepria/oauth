<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project default="war-and-tomcat.deploy" name="Module Building">
  
  <!-- Значения property - immutable, если BIN_HOME не был задан ранее, то берется из переменной окружения -->
  <property environment="env" />
  <property name="BIN_HOME" value="${env.BIN_HOME}" />
  <!-- Проверка, что BIN_HOME определен, иначе - ошибка -->
  <fail unless="BIN_HOME" message="Binary repository path not specified. Specify it either in environment variable %BIN_HOME% or use -DBIN_HOME=... command line argument." />

  
  
  <!-- Начало упорядоченной последовательности статических вызовов для инициализации свойств -->
  
  <property file="build.properties" />
  <property file="deploy.properties" />
  <property file="dependency.properties" />
  
  <taskdef name="include-dependency-package" classname="com.technology.jep.jepriatoolkit.check.IncludeDependencyPackage">
    <classpath>
      <pathelement location="${JEPRIA-TOOLKIT_LIB}"/>
    </classpath>
  </taskdef>
  <include-dependency-package libPath="${JEPRIA-DEPENDENCY_LIB}" destFilename="dependency-jepria.temp.properties"/>
  <property file="dependency-jepria.temp.properties" />
  
  <include-dependency-package libPath="${JERSEY-DEPENDENCY_LIB}" destFilename="dependency-jersey.temp.properties"/>
  <property file="dependency-jersey.temp.properties" />

  <!-- Конец упорядоченной последовательности статических вызовов для инициализации свойств -->
  
  
  
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${ANT-CONTRIB_LIB}"/>
    </classpath>
  </taskdef>

  <!-- Общие наборы файлов -->
  <path id="libs">
    <pathelement location="${JEPRIA_LIB}" />

    <!-- Jepria/Jersey: application compile dependencies -->
    <pathelement location="${JERSEY-JERSEY-SERVER_LIB}" />
    <pathelement location="${JERSEY-JAKARTA-WS-RS-API_LIB}" />
    <pathelement location="${JERSEY-JERSEY-COMMON_LIB}" />
    <pathelement location="${JERSEY-JAKARTA-ANNOTATION-API_LIB}" />
    <pathelement location="${JERSEY-JAKARTA-SERVLET-API_LIB}" />


    <pathelement location="${SERVLET-API_LIB}" />
    <pathelement location="${OAUTH_SDK}" />
  </path>
  
  <path id="jepria-toolkit-libs">
    <pathelement location="${JEPRIA-TOOLKIT_LIB}" />
  </path>

  <path id="tomcat-libs">
    <pathelement location="${TOMCAT-CATALINA-ANT_LIB}" />
    <pathelement location="${TOMCAT-COYOTE_LIB}" />
    <pathelement location="${TOMCAT-UTIL_LIB}" />
  </path>

  <fileset dir="build" id="class-web-jar">
    <include name="**/*.class" />
  </fileset>

  <target name="check-build-dependencies">

    <propertyregex property="BIN_HOME_BUILD"
      input="${BIN_HOME}/build/"
      regexp="\\"
      replace="/"
      global="true" 
      casesensitive="false" />
      
    <echo message="Binary repository BUILD folder path: ${BIN_HOME_BUILD}" />
    
    <if>
      <not><isset property="pack.list"/></not>
      <then>
        <propertyselector
          property="pack.list"
          delimiter=","
          match="(([\S])+(\_(lib|jslib))$)?"
          select="\1"
          casesensitive="false" />
      </then>
     <else/>
    </if>

    <echo message="Build dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <propertyregex property="@{lib-path}.name"
          input="${@{lib-path}}"
          regexp="\\"
          replace="/"
          global="true" 
          casesensitive="false" />
        <if> 
           <contains substring="${BIN_HOME_BUILD}" string="${@{lib-path}.name}"/>
          <then>
            <if>
              <available file="${@{lib-path}}"/>
              <then/>
              <else>
                <echo>Required library '${@{lib-path}.name}' is absent</echo>
                <property name="DEPENDENCY_ABSENCE" value="true" />
              </else>
            </if>
          </then>
          <else/>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY FOLDER '${BIN_HOME_BUILD}' PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Build dependency checking succeeded"/>
  </target>
  
  <target name="check-deploy-dependencies">
    
    <propertyregex property="BIN_HOME_DEPLOY"
      input="${BIN_HOME}/deploy/"
      regexp="\\"
      replace="/"
      global="true" 
      casesensitive="false" />
    
    <echo message="Binary repository DEPLOY folder path: ${BIN_HOME_DEPLOY}" />
    <if>
      <not><isset property="pack.list"/></not>
      <then>
        <propertyselector
          property="pack.list"
          delimiter=","
          match="(([\S])+(\_(lib|jslib))$)?"
          select="\1"
          casesensitive="false" />
      </then>
     <else/>
    </if>
    
    <echo message="Deploy dependency checking..."/>
    <for list="${pack.list}" param="lib-path">
      <sequential>
        <propertyregex property="@{lib-path}.name"
          input="${@{lib-path}}"
          regexp="\\"
          replace="/"
          global="true" 
          casesensitive="false" />
        <if> 
           <contains substring="${BIN_HOME_DEPLOY}" string="${@{lib-path}.name}"/>
          <then>
            <if>
              <available file="${@{lib-path}}"/>
              <then/>
              <else>
                <echo>Required library '${@{lib-path}.name}' is absent</echo>
                <property name="DEPENDENCY_ABSENCE" value="true" />
              </else>
            </if>
          </then>
          <else/>
        </if>
      </sequential>
    </for>
    <if> <equals arg1="${DEPENDENCY_ABSENCE}" arg2="true" />
      <then>
        <echo>Dependency checking failed</echo>
        <fail message="BINARY REPOSITORY FOLDER '${BIN_HOME_DEPLOY}' PROBABLY SHOULD BE UPDATED"/>
      </then>
    </if>
    <echo message="Deploy dependency checking succeeded"/>
  </target>
  
  <target name="check-dependencies" depends="check-deploy-dependencies,check-build-dependencies"/>
  
  <!-- Java-компиляция -->
  <target name="java-compile">
    <mkdir dir="build" />
    <javac debug="on" destdir="build" encoding="utf-8" includeantruntime="false" srcdir="src/main/java">
      <classpath refid="libs" />
    </javac>
  </target>

  <target name="web-jar" depends="java-compile">
    <outofdate>
      <sourcefiles>
        <fileset refid="class-web-jar" />
      </sourcefiles>
      <targetfiles path="build-lib/${PRODUCT_NAME}-web.jar" />
      <sequential>
        <jar destfile="build-lib/${PRODUCT_NAME}-web.jar">
          <fileset refid="class-web-jar" />
        </jar>
      </sequential>
    </outofdate>
  </target>
  
  <!-- Создание приложения war -->
  <target name="war" depends="web-jar">
    <outofdate>
      <sourcefiles>
        <fileset file="build-lib/${PRODUCT_NAME}-web.jar" />
      </sourcefiles>
      <targetfiles path="target/${PRODUCT_NAME}.war" />
      
      <sequential>
        <copy todir="build-war/WEB-INF/lib">
          <fileset file="build-lib/${PRODUCT_NAME}-web.jar" />

          <fileset file="${JEPRIA_LIB}" />

          <!-- Jepria obsolete runtime dependencies -->
          <!-- TODO Эти зависимости не нужны для Rest/Jersey, они нужны для функционирования текущей версии Джеприи в целом. Необходимо убрать эти зависимости со временем -->
          <fileset file="${JEPRIA_LIB}" />
          <fileset file="${LOG4J_LIB}" />
          <fileset file="${COMMONS-FILEUPLOAD_LIB}" />
          <fileset file="${COMMONS-IO_LIB}" />
          <fileset file="${GWT-LOG_LIB}" />
          <fileset file="${GWT-SERVLET_LIB}" />

          <!-- Rest/Jersey -->
          <!-- Jepria/Jersey: application compile dependencies -->
          <fileset file="${JERSEY-JERSEY-SERVER_LIB}" />
          <fileset file="${JERSEY-JAKARTA-WS-RS-API_LIB}" />
          <fileset file="${JERSEY-JERSEY-COMMON_LIB}" />
          <!-- Jersey runtime dependencies -->
          <fileset file="${JERSEY-JERSEY-CONTAINER-SERVLET-CORE_LIB}" />
          <fileset file="${JERSEY-JERSEY-HK2_LIB}" />
          <fileset file="${JERSEY-HK2-API_LIB}" />
          <fileset file="${JERSEY-HK2-UTILS_LIB}" />
          <fileset file="${JERSEY-HK2-LOCATOR_LIB}" />
          <fileset file="${JERSEY-JERSEY-CLIENT_LIB}" />
          <fileset file="${JERSEY-VALIDATION-API_LIB}" />
          <!-- Jepria/Jersey JsonBindingProvider feature compile dependencies -->
          <fileset file="${JERSEY-JAKARTA-JSON-BIND-API_LIB}" />
          <fileset file="${GSON_LIB}" />
          <!-- Jepria/Jersey JsonBindingProvider feature runtime dependencies -->
          <fileset file="${JERSEY-JAKARTA-INJECT_LIB}" />
          <fileset file="${JERSEY-JAKARTA-ANNOTATION-API_LIB}" />
          <fileset file="${JERSEY-JAVASSIST_LIB}" />

          <fileset file="${OAUTH_SDK}" />
          <fileset file="${NIMBUS_JOSE_JWT}" />
          <fileset file="${ASM}" />
          <fileset file="${JSON_SMART}" />
        </copy>

        <!-- Copy web pages -->

        <copy todir="build-war/" failonerror="false">
          <fileset dir="src/html"/>
        </copy>

      	<!-- swagger -->
        <unzip src="${SWAGGER-UI_LIB}" dest="build-war/swagger-ui"/>

        <copy file="src/main/webapp/WEB-INF/web.xml" todir="build-war/WEB-INF" />

        <copy todir="build-war/WEB-INF/api-spec" failonerror="false">
          <fileset dir="src/api-spec"/>
        </copy>

        <jar basedir="build-war" destfile="target/${PRODUCT_NAME}.war" />
      </sequential>
    </outofdate>
  </target>
  
  <target name="war-and-tomcat.deploy" depends="war, tomcat.deploy"/>

  <!-- получаем домен и порт из DEPLOYMENT_PATH и PORT, если не задан localhost:80 -->
  <target name="get-server-domain">
    <fail unless="DEPLOYMENT_PATH" message="DEPLOYMENT_PATH not specified. Use -DEPLOYMENT_PATH=... command line argument." />
    <propertyregex property="DOMAIN"
              input="${DEPLOYMENT_PATH}"           
              regexp="^(?:https?:\/\/)?([^:\/]+)"
              select="\0" 
              casesensitive="false" />
    <propertyregex property="PORT"
              input="${DEPLOYMENT_PATH}"           
              regexp="(?&lt;=:)[0-9]{2,5}"
              select="\0" 
              casesensitive="false" />      
    <condition property="DEPLOYMENT_PATH" value="http://localhost">
        <not>  
            <isset property="DEPLOYMENT_PATH"/>
        </not>
    </condition>
    <condition property="PORT" value="80">
        <not>  
            <isset property="PORT"/>
        </not>
    </condition>
    <echo message="${DOMAIN}:${PORT}" />
  </target>

  <target name="available-tomcat">
    <condition property="VOID" value="/dev/null" else="NUL">
        <os family="unix" />
    </condition>
    <!-- проверяем соединение с Tomcat + проверка логин пароль--> 
    <trycatch property="errorMessage">
        <try>
            <get src="${DOMAIN}:${PORT}/manager/html" 
                 dest="${VOID}"
                 maxtime="3"
                 username="${LOGIN}"
                 password="${PASSWORD}"/>
        </try>
        <catch>
             <fail>
                [ERROR]: Tomcat is not available on ${DOMAIN}:${PORT} OR incorrect LOGIN/PASSWORD!
                ${errorMessage}
            </fail>
        </catch>
    </trycatch>    
    <echo message="OK" />
  </target>

  <target name="define-tomcat">
    <taskdef name="tomcat.deploy" classname="org.apache.catalina.ant.DeployTask" classpathref="tomcat-libs" />
    <taskdef name="tomcat.undeploy" classname="org.apache.catalina.ant.UndeployTask" classpathref="tomcat-libs" />
  </target>
  
  <target name="tomcat.undeploy" description="Undeploy from Tomcat" depends="check-deploy-dependencies, get-server-domain, available-tomcat, define-tomcat">
    <tomcat.undeploy 
      failonerror="no"
      url="${DEPLOYMENT_PATH}"
      username="${LOGIN}"
      password="${PASSWORD}"
      path="${CONTEXT_PATH}"
    />
  </target>

  <target name="tomcat.deploy" description="Deploy to Tomcat" depends="check-deploy-dependencies, get-server-domain, available-tomcat, define-tomcat, tomcat.undeploy">
    <echo message="Deploying target/${PRODUCT_NAME}.war to:${DEPLOYMENT_PATH}"/>
    <echo message="Deploy to Tomcat..." />
    <echo message="LOGIN: ${LOGIN}" />
  
    <trycatch property="errorMessage">
      <try>
        <tomcat.deploy 
          url="${DEPLOYMENT_PATH}"
          username="${LOGIN}"
          password="${PASSWORD}"
          path="${CONTEXT_PATH}"
          war="file:target/${PRODUCT_NAME}.war"
          update="true" />
          
        <property name="StatusCode" value="0" />
        <property name="errorMessage" value="" />
      </try>
      <catch>
        <property name="StatusCode" value="1" />
        <fail message="[ERROR]: ${errorMessage}" />
      </catch>
    </trycatch>
    
  </target>

  <target name="clean" depends="check-dependencies">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="build" />
      <fileset dir="build-lib" />
      <fileset dir="build-war" />
      <fileset file="dependency-jepria.temp.properties"/>
      <fileset file="dependency-jersey.temp.properties"/>
    </delete>
  </target>

  <target name="test-compile" depends="check-dependencies">
    <mkdir dir="build-test/test-unit" />
    <javac srcdir="src/main/java;src/test/java"
           destdir="build-test/test-unit"
           includes="**/*Test.java"
           debug="on"
           encoding="utf-8"
           includeantruntime="false"
           verbose="${full-compile}">
      <classpath refid="libs" />
      <classpath>
        <pathelement location="src/main/java"/>
      </classpath>
    </javac>
  </target>

  <target name="test" depends="test-compile">
    <junit fork="yes" printsummary="yes">
      <classpath>
        <pathelement location="${JUNIT_LIB}"/>
        <pathelement location="build-test/test-unit" />
      </classpath>
      <formatter type="plain" usefile="false" />
      <batchtest>
        <fileset dir="build-test/test-unit" includes="**/*Test.class" />
      </batchtest>
    </junit>
  </target>
  
</project>
