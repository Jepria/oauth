{
  "openapi": "3.0.0",
  "info": {
    "version": "1.0.0",
    "title": "OAuth 2.0 Provider API"
  },
  "tags": [
    {
      "name": "OAuth: flow",
      "description": "OAuth authentication management"
    }
  ],
  "servers": [
    {
      "url": "/{appContextPath}/{apiEndpoint}"
    }
  ],
  "paths": {
    "/authorize": {
      "get": {
        "tags": ["OAuth: flow"],
        "summary": "start authorization flow",
        "description": "This endpoint is used in the code and implicit OAuth 2.0 flows which require end-user interaction.",
        "operationId": "authorize",
        "parameters": [
          {
            "name": "response_type",
            "in": "query",
            "description": "Indicates that your server expects to receive an authorization code",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "code",
                "token"
              ]
            }
          },
          {
            "name": "client_id",
            "in": "query",
            "description": "The client ID you received when you first created the application",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "redirect_uri",
            "in": "query",
            "description": "Indicates the URI (Base64URL without padding) to return the user to after authorization is complete",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "state",
            "in": "query",
            "required": true,
            "description": "A random string generated by client",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "307": {
            "content": {
              "application/x-www-form-urlencoded": {
                "schema": {
                  "type": "string",
                  "example" : "https://client.example/callback?error=access_denied&state=xyz || https://client.example/callback#error=access_denied&state=xyz",
                  "properties": {
                    "code": {
                      "type": "string",
                      "description": "authorization code"
                    },
                    "error": {
                      "type": "string",
                      "description": "A single ASCII [USASCII] error code from the following: \n  * _invalid_request_ - The request is missing a required parameter, includes an invalid parameter value, includes parameter more than once, or is otherwise malformed. \n  * _unauthorized_client_ - The client is not authorized to request an access token using this method. \n * _access_denied_ - The resource owner or authorization server denied the request.\n  * _unsupported_response_type_ - The authorization server does not support obtaining an access token using this method.\n  * _server_error_ - The authorization server encountered an unexpected condition that prevented it from fulfilling the request.",
                      "enum": [
                        "invalid_request",
                        "unauthorized_client",
                        "access_denied",
                        "unsupported_response_type",
                        "server_error"
                      ]
                    },
                    "error_description": {
                      "type": "string",
                      "description": "Human-readable ASCII [USASCII] text providing additional information"
                    },
                    "state": {
                      "type": "string",
                      "description": "CSRF token"
                    }
                  }
                },
                "examples": {
                  "implicit": {
                    "value": "https://client.example/callback?error=access_denied&state=xyz",
                    "summary": "Authorization Code Flow"
                  },
                  "code": {
                    "value": "https://client.example/callback#error=access_denied&state=xyz",
                    "summary": "Implicit Flow"
                  }
                }
              }
            },
            "description": "Redirect to provided request URI"
          },
          "400": {
            "description": "Error if redirect_uri is invalid"
          }
        }
      }
    },
    "/token": {
      "post": {
        "tags": ["OAuth: flow"],
        "summary": "get OAuth 2.0 token",
        "description": "The token endpoint is used by the client to obtain an access token by presenting its authorization grant or refresh token. The token endpoint is used with every authorization grant except for the implicit grant type (since an access token is issued directly).",
        "operationId": "getToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "grant_type": {
                    "type": "string",
                    "description": "Indicates OAuth 2.0 specified grant type value",
                    "enum": [
                      "authorization_code",
                      "password",
                      "client_credentials",
                      "refresh_token"
                    ]
                  },
                  "client_id": {
                    "type": "string",
                    "description": "Indicates the registered client ID"
                  },
                  "client_secret": {
                    "type": "string",
                    "description": " Indicates the client secret connect to client ID"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "Indicates the URI in __Base64URL without padding__ to return the user to after authorization is complete"
                  },
                  "code": {
                    "type": "string",
                    "description": "Indicates the authorizaton code"
                  },
                  "username": {
                    "type": "string",
                    "description": "Indicates the end-user name"
                  },
                  "password": {
                    "type": "string",
                    "description": "Indicates the end-user password"
                  }
                },
                "required": [
                  "grant_type"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TokenResponse"
                }
              }
            }
          },
          "400": {
            "description": "bad request",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "unauthorized",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal sever error"
          }
        }
      }
    },
    "/tokeninfo": {
      "post": {
        "tags": ["OAuth: flow"],
        "summary": "introspect token",
        "description": "Takes a parameter representing an OAuth 2.0 token and returns a JSON document representing the meta information surrounding the token, including whether this token is currently active.",
        "operationId": "getTokenInfo",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "string representation of OAuth 2.0 token"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json;charset=utf-8": {
                "schema": {
                  "$ref": "#/components/schemas/TokenInfoResponse"
                }
              }
            }
          },
          "404": {
            "description": "token not found"
          }
        }
      }
    },
    "/token/revoke": {
      "post": {
        "tags": ["OAuth: flow"],
        "summary": "permanently block token in OAuth 2.0 provider",
        "description": "",
        "operationId": "revokeToken",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "string representation of OAuth 2.0 token"
                  },
                  "redirect_uri": {
                    "type": "string",
                    "description": "URI in __Base64URL without padding__. Server will send redirect to this URI (only if it is valid)"
                  }
                },
                "required": [
                  "token"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation if redirect_uri param is empty or invalid"
          },
          "307": {
            "description": "successful operation if redirect_uri param is valid"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "enum": [
              "invalid_request",
              "invalid_client",
              "invalid_grant",
              "unauthorized_client",
              "unsupported_grant_type"
            ],
            "description": "An error code which can take on of the following values: \n  * _invalid_request_ - The request is missing a required parameter, includes an unsupported parameter value (other than grant type), repeats a parameter, or is otherwise malformed.\n  * _invalid_client_ - Client authentication failed, due to missing or invalid client credentials \n  * _invalid_grant_ - The provided OAuth 2.0 grant is invalid, expired or has been revoked. May also indicate the redirect_uri parameter doesn't match (for a code grant). \n  * _unauthorized_client_ - The client is successfully authenticated, but it's not registered to use the submitted grant type \n  * _unsupported_grant_type_ - The grant type is not supported by the server"
          },
          "error_description": {
            "type": "string",
            "description": ""
          },
          "error_uri": {
            "type": "string",
            "description": ""
          }
        }
      },
      "TokenResponse": {
        "type": "object",
        "properties": {
          "token_type": {
            "type": "string",
            "description": "The type of the token"
          },
          "expires_in": {
            "type": "integer",
            "format": "int32",
            "description": "The lifetime in seconds of the access token"
          },
          "access_token": {
            "type": "string",
            "description": "The access token issued by the authorization server"
          },
          "refresh_token": {
            "type": "string",
            "description": "The refresh token, which can be used to obtain new access tokens"
          }
        }
      },
      "TokenInfoResponse": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Boolean indicator of whether or not the presented token is currently active."
          },
          "client_id": {
            "type": "string",
            "description": "Client identifier for the OAuth 2.0 client that requested this token"
          },
          "username": {
            "type": "string",
            "description": ""
          },
          "sub": {
            "type": "string",
            "description": "Human-readable identifier for the resource owner who authorized this token"
          },
          "exp": {
            "type": "integer",
            "format": "int64",
            "description": "Integer timestamp, measured in the number of seconds since January 1 1970 UTC, indicating when this token will expire, as defined in JWT"
          },
          "aud": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Service-specific string identifier or list of string identifiers representing the intended audience for this token, as defined in JWT"
          },
          "iss": {
            "type": "string",
            "description": "String representing the issuer of this token, as defined in JWT"
          },
          "jti": {
            "type": "string",
            "description": "String identifier for the token, as defined in JWT"
          }
        }
      }
    }
  }
}